// Code generated by go-bindata.
// sources:
// templates/cmd/main.go.tpl
// templates/cmd/serve.go.tpl
// templates/config/config.go.tpl
// templates/main.go.tpl
// DO NOT EDIT!

package project

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cmdMainGoTpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\xc1\x4a\x03\x31\x10\x86\xcf\x99\xa7\x18\xe6\xd4\xd2\x92\xde\x0b\x1e\xa4\xa0\x37\x2f\x45\x2f\x22\x12\xa7\xd3\x18\xbb\x49\x96\x24\xbb\x22\xcb\xbe\xbb\xa4\xdb\xd5\x8a\x87\x40\xe6\x0b\x33\xf3\x7f\x69\x0d\x9f\x8c\x15\x64\x7f\x00\x70\xbe\x8d\xa9\xe0\x02\x14\x59\x57\xde\xbb\x37\xcd\xd1\x6f\xba\x74\x34\xbd\x6c\xb8\x71\x04\xa0\x68\x18\x74\x9b\xe2\x87\x70\x79\x0d\xc6\xcb\x38\x6e\x38\x86\xa3\xb3\x04\x4b\x80\x63\x17\x18\xef\xa5\xec\xa2\xf7\x26\x1c\xf2\x62\x89\xcf\x2f\xdc\x38\x7d\x01\x38\x80\x4a\x52\xba\x14\xfe\xf2\x01\x94\xaa\x47\x3d\x18\x2f\x5b\x44\xa4\x2c\xa9\x17\x5a\x57\xf6\x98\x8d\xad\x90\x72\x31\xa9\x64\x24\x5c\xe1\xb4\x53\xef\x25\xf5\x8e\xa5\x76\xe1\x0a\x09\x3f\x63\x3a\x49\xca\x53\xdf\x2d\x17\x17\xc3\x16\xcf\xa3\xa6\xa2\xf2\x71\x0d\x6a\x84\x11\x80\x63\xc8\x05\xef\x1a\x63\x77\xe7\x69\x78\x83\x34\xbb\xfc\x98\xd4\xe7\x5f\x8d\x5a\xfd\x73\xa8\xb0\x86\xaf\xf7\x7d\x49\x2e\xd8\x99\xcc\x3a\x57\x3b\x56\x48\x6b\xe4\x29\xe0\x93\x69\x3a\xd9\x22\xe9\xcb\x17\xea\x2f\xe3\x1b\xba\xce\xf8\x1d\x00\x00\xff\xff\xfe\x88\x09\x15\x9f\x01\x00\x00"

func cmdMainGoTplBytes() ([]byte, error) {
	return bindataRead(
		_cmdMainGoTpl,
		"cmd/main.go.tpl",
	)
}

func cmdMainGoTpl() (*asset, error) {
	bytes, err := cmdMainGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/main.go.tpl", size: 415, mode: os.FileMode(420), modTime: time.Unix(1592906159, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cmdServeGoTpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcc\x31\x4f\x03\x31\x0c\x05\xe0\xf9\xfc\x2b\xac\x4c\x17\x04\xb9\x1d\x89\x01\x55\x6a\xc5\xc2\x40\x07\x46\x94\xba\x4e\x6a\x9a\x8b\x4f\x26\x57\x40\x55\xff\x3b\x6a\x2b\x24\xd8\x2c\xbf\xf7\xbd\x29\xd2\x3e\x66\x46\x1a\xb7\x00\x32\x4e\x6a\x0d\x7b\xe8\x5c\x96\xb6\x9b\x37\x81\x74\x1c\x4a\xac\xc4\x76\xb7\x97\x36\x44\x1b\xd5\xbe\x87\xa2\xd9\xfd\xef\xcc\x96\xe2\x81\x07\x2a\xe2\x00\x3a\x77\x3c\x86\xc9\xf4\x9d\xa9\xbd\xd5\x38\xf2\xe9\x34\x90\xd6\x24\xd9\x81\x07\x48\x73\x25\xfc\x60\x3b\xf0\x23\x35\xd1\xda\x13\xde\x50\x91\xb0\xd0\xda\xf8\xab\x79\x64\x33\x35\x3c\x42\x47\x29\xe3\xfd\x03\x5e\x6d\x78\xe1\xb8\x5d\x5c\xce\x9e\xc2\xaa\xe8\x26\x96\x75\x33\xa9\xb9\x5f\x96\x98\xaf\x89\xf7\xd0\x15\xcd\x99\xed\x0c\x8b\xe6\xb0\xe2\xd6\xfb\xf0\x2a\x6d\xb7\x14\x2e\xdb\xde\xc5\x69\x72\xb7\xbf\x9b\x6b\xb6\x83\x10\x3f\xc7\x91\x3d\x00\x22\xe2\x55\xff\x05\x94\xf2\x19\xa4\xec\xc3\x53\x4d\xda\xbb\x0b\xaa\x19\x3f\xa5\xed\xce\x7f\xe7\xa1\x33\x6e\xb3\x55\xac\x52\xe0\x04\x3f\x01\x00\x00\xff\xff\x07\xde\x19\xe5\x55\x01\x00\x00"

func cmdServeGoTplBytes() ([]byte, error) {
	return bindataRead(
		_cmdServeGoTpl,
		"cmd/serve.go.tpl",
	)
}

func cmdServeGoTpl() (*asset, error) {
	bytes, err := cmdServeGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/serve.go.tpl", size: 341, mode: os.FileMode(420), modTime: time.Unix(1593008808, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configConfigGoTpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\xcd\x6e\xe3\x36\x10\x3e\x8b\x4f\x31\xd5\xa1\x90\x0a\x87\x02\x7a\x34\xe0\xc3\x62\xbb\x29\xb6\x30\x52\x60\xdd\xb4\xc7\x98\x91\x46\x32\x1b\x8a\x54\x29\x32\x41\x12\xf8\xdd\x8b\xe1\x8f\xec\x04\x31\x0a\xb4\xa8\x0e\x82\x38\xbf\xdf\xcc\x37\x1c\x4d\xa2\x7d\x10\x03\x42\x6b\x74\x2f\x07\xc6\xe4\x38\x19\xeb\xa0\x62\x45\x29\x4d\x23\x8d\x77\x52\x95\x8c\x15\x8f\x42\xc9\x4e\x38\x69\x34\x94\x83\x74\x07\x7f\xcf\x5b\x33\x36\x83\xb9\x32\x2f\x2f\xa6\xa1\xd7\xd5\xc9\xa6\x64\xc5\xb9\x95\x12\xba\x45\x7b\xf5\x20\x5d\x23\xec\x68\xec\x73\xa3\xcc\x70\xd9\x46\x9b\x7b\x85\xef\xd4\xb3\xb4\x7e\x9a\x51\x93\xa7\xf5\x73\xd0\x9a\xe9\x61\xe0\x52\x37\xcf\x62\x54\xfc\xf1\xc7\x92\xd5\x8c\xb5\x46\xcf\x01\xfe\x0e\xed\xa3\x6c\xf1\x46\x8c\x08\x1b\x28\x5f\x5f\xf9\x1c\x25\x77\x5a\x8c\x78\x3c\x06\xeb\xa6\x81\xcf\xfd\x00\xa3\x90\x1a\x66\x67\x7d\xeb\xbc\x45\x30\x3d\xb8\x03\x82\x98\xa6\xd4\x16\x6f\x43\x55\x9c\xb9\xe7\x09\x83\x47\x34\x86\x57\x56\x6c\xcd\x00\xe1\xd9\x9a\xe1\x73\xb0\xa6\xc3\x9e\x30\xad\x4b\x2a\x73\xcf\x8e\x8c\xf5\x5e\xb7\x50\xb5\xfd\x40\xde\x35\xfc\x1e\x3b\x85\x55\x0d\x68\xad\xb1\x14\xc8\xa2\xf3\x56\xc3\xa9\x89\x3c\x5b\xed\x42\xb2\xea\xfb\xb6\x1f\x56\xac\x38\xa3\x82\x5f\x4b\x54\x5d\x50\xf0\xad\x19\x56\xe7\xce\xdf\xf0\x2f\x2f\x2d\x76\xf5\x8a\x15\xf5\x02\xe1\x1b\x8a\x2e\xa2\xac\x26\xe1\x0e\x54\x87\xd4\x43\x1d\x6a\x22\x0c\xe2\x29\x6a\x57\x84\x0b\xd6\x1b\x88\x13\xc0\xc9\xef\x5a\x2a\x0c\x5e\x35\x2b\x64\x1f\x0c\xbe\xdb\x80\x96\x8a\x3c\x8b\xc8\x0b\xbf\xc1\xa7\xaa\xe6\x7f\x48\x77\xf8\x42\x85\x55\x68\x6d\xcd\x59\x51\x14\x24\x8a\x70\x4b\x8a\x51\xae\x20\x84\x0a\xba\x6b\xe1\x84\xaa\x4a\xaf\xc5\xbd\x42\x70\x06\x2c\x8a\x2e\xf5\x1e\x7a\xa9\xb0\xac\x59\x71\x64\xac\x48\xa2\xf5\x06\x34\x3e\x55\xd4\x4a\x56\x10\x8e\x0d\x84\x19\xb8\xd5\xa3\xb0\xf3\x41\xa8\xea\xac\x90\xe8\xf3\x5f\x31\x5b\xf1\x74\x17\x23\x95\x2b\x58\xa2\x5f\x80\xef\x33\x8e\x8f\x6a\x88\x78\xa3\x82\x9f\x06\xe1\xdf\xe0\x4b\x89\xbf\xea\xc0\xfb\xdb\x61\xcd\xe9\xee\x22\x95\x1b\x50\x66\xe0\x5f\xb5\x74\x15\x7d\x44\xf8\x94\xe3\xd3\x34\xd1\x1d\x59\x43\x86\xb4\x35\x03\x4f\x42\x9a\xb6\x2d\x3e\xa2\x5a\xd3\x4c\x9f\xe9\x83\x90\xff\x8c\xae\xa2\xf1\x2a\x76\xa8\x9d\x7d\x5e\xbf\xb5\x89\x42\x52\x7f\xea\xba\xdf\xac\x68\x71\xfd\x26\x45\x12\x92\xc1\x2f\xbb\x5f\x6f\x42\x8a\x73\x03\x12\xae\x58\x71\xfc\xe7\xce\x64\xaa\x3e\xee\xce\xed\x42\x8b\xd4\xd2\x51\x1b\x72\x6b\xd2\x8d\xfb\x21\xed\xbe\x63\xdc\x07\x91\x31\x39\x83\x00\x33\x51\x27\x67\xe8\x8d\x0d\x1b\x81\x02\x48\xa1\xe4\x4b\xe8\x30\x59\xa7\x55\xd1\x61\x2f\xbc\x0a\xc1\x09\xd6\x17\xaa\x3c\x6d\x8b\xd3\x5a\x38\xed\x8c\xa6\x81\xd4\x61\x90\x1d\x6a\x27\x7b\x89\xf6\x6c\xed\x70\x96\x69\x49\x17\x14\xf6\x7f\xce\x46\xaf\x4b\x31\x4d\x61\x7d\x95\x10\xf7\xcb\x72\xde\x87\xa0\x81\x96\x08\x3d\xf9\x59\x9c\x2c\xce\xa8\x5d\x5c\xdd\x29\xc5\x5e\x19\x3b\xf8\x39\xd2\xb8\xe7\x2c\x92\x0c\x61\xef\xf2\x1d\xb6\x16\x5d\xce\xa8\x48\x93\xd3\xc5\x43\xcc\x15\xe9\x8d\xc9\x7e\xda\xdd\xe4\x84\xd4\xaa\x39\xaa\x0e\xc6\x3c\x70\x96\x86\xe3\x5d\x21\xd1\x24\xc7\x4d\xa7\x18\x38\x0f\x06\x60\x24\x4e\x74\x1d\x39\x26\xe8\x74\x93\xa8\x62\xe8\xe9\x5e\x82\xd4\xce\x84\xc9\x66\xcb\x94\xc1\xbd\x31\x6a\x69\x58\xd7\xdd\x39\x92\x2e\x1d\x5b\x04\x31\x1b\x4d\x59\xce\x44\x2e\x54\xc0\x28\x9c\xc3\x0e\x8c\x77\x93\x77\x9c\x85\xf1\x7c\x13\x95\xde\x39\x60\xf8\x7e\xb7\xe3\x17\xce\xff\x97\x4d\x9f\x2f\xe7\xa5\x6d\x7f\xe9\x07\x41\xe4\x7d\xe8\xb4\x4a\xcc\xe7\x73\x9c\x80\xfc\xe3\xf8\x3b\x00\x00\xff\xff\x9a\x98\xfa\xc8\x22\x08\x00\x00"

func configConfigGoTplBytes() ([]byte, error) {
	return bindataRead(
		_configConfigGoTpl,
		"config/config.go.tpl",
	)
}

func configConfigGoTpl() (*asset, error) {
	bytes, err := configConfigGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/config.go.tpl", size: 2082, mode: os.FileMode(493), modTime: time.Unix(1593009081, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mainGoTpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\x4d\x4b\xf4\x30\x10\xc7\xcf\x9d\x4f\x31\x4f\x4e\x09\xcb\x93\xde\x95\x1e\x16\x51\x6f\x7b\x50\xc4\xa3\xc4\x74\x9a\x8d\x9b\x37\xa6\xed\x8a\x2c\xfd\xee\xd2\x94\x05\x05\x6f\x33\xff\x37\x7e\xc5\xd8\x93\x71\x84\xd1\xf8\x04\xe0\x63\xc9\x3c\xa1\x84\x46\xe4\x51\x00\x34\xc2\xf9\xe9\x38\xbf\x6b\x9b\x63\x1b\x4c\xb2\xc4\xff\x4f\x7e\x6a\x0d\xc7\xcc\x5f\x6d\xc8\x4e\xfc\xce\xcc\x3c\x98\x33\xb5\x36\xf8\xda\xbe\x5c\x74\xe1\xfc\x41\x76\x7a\x4b\x26\xd2\xb2\xb4\x36\xf6\xe2\x6f\x23\xa7\xc1\x3b\x01\x0a\x60\x98\x93\xad\x40\x52\xe1\x05\x1a\x53\x0a\xde\x74\x68\x83\xd7\x07\xfa\xdc\x97\x22\x55\x15\xf5\xcb\xb8\x92\x77\x28\xf6\x28\x70\x87\xdb\x82\x7e\x26\x3e\x7b\x4b\x07\x13\x09\x77\x28\x70\xdc\x7e\xb1\x75\x1e\x82\x71\x23\x76\x68\x63\xaf\x1f\x69\xaa\xef\x75\xef\x2e\xc7\x68\x52\xff\xc3\xbe\x2a\x52\x01\x34\x7e\x40\x62\x5e\x51\xd6\xf0\xd3\x9c\x64\x1e\xf5\x9e\xdd\xa8\x6e\xab\xf1\xaf\xc3\xe4\xc3\x4a\xdc\x84\xec\xd6\xba\x54\xfa\xd5\x4f\xc7\x7b\xe6\xcc\x92\x98\x95\xae\x67\x48\x52\x0c\xc6\x07\xea\x91\xe7\xb4\xae\x09\x05\xcd\x02\x0b\x7c\x07\x00\x00\xff\xff\xa7\x80\xed\x8d\x8e\x01\x00\x00"

func mainGoTplBytes() ([]byte, error) {
	return bindataRead(
		_mainGoTpl,
		"main.go.tpl",
	)
}

func mainGoTpl() (*asset, error) {
	bytes, err := mainGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "main.go.tpl", size: 398, mode: os.FileMode(420), modTime: time.Unix(1593008905, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cmd/main.go.tpl":      cmdMainGoTpl,
	"cmd/serve.go.tpl":     cmdServeGoTpl,
	"config/config.go.tpl": configConfigGoTpl,
	"main.go.tpl":          mainGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cmd": &bintree{nil, map[string]*bintree{
		"main.go.tpl":  &bintree{cmdMainGoTpl, map[string]*bintree{}},
		"serve.go.tpl": &bintree{cmdServeGoTpl, map[string]*bintree{}},
	}},
	"config": &bintree{nil, map[string]*bintree{
		"config.go.tpl": &bintree{configConfigGoTpl, map[string]*bintree{}},
	}},
	"main.go.tpl": &bintree{mainGoTpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
