// Code generated by go-bindata.
// sources:
// env/templates/cmd/main.go.tpl
// env/templates/cmd/serve.go.tpl
// env/templates/config/config.go.tpl
// env/templates/main.go.tpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _envTemplatesCmdMainGoTpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\xc1\x4a\x03\x31\x10\x86\xcf\x99\xa7\x18\xe6\xd4\xd2\x92\xde\x0b\x1e\xa4\xa0\x37\x2f\x45\x2f\x22\x12\xa7\xd3\x18\xbb\x49\x96\x24\xbb\x22\xcb\xbe\xbb\xa4\xdb\xd5\x8a\x87\x40\xe6\x0b\x33\xf3\x7f\x69\x0d\x9f\x8c\x15\x64\x7f\x00\x70\xbe\x8d\xa9\xe0\x02\x14\x59\x57\xde\xbb\x37\xcd\xd1\x6f\xba\x74\x34\xbd\x6c\xb8\x71\x04\xa0\x68\x18\x74\x9b\xe2\x87\x70\x79\x0d\xc6\xcb\x38\x6e\x38\x86\xa3\xb3\x04\x4b\x80\x63\x17\x18\xef\xa5\xec\xa2\xf7\x26\x1c\xf2\x62\x89\xcf\x2f\xdc\x38\x7d\x01\x38\x80\x4a\x52\xba\x14\xfe\xf2\x01\x94\xaa\x47\x3d\x18\x2f\x5b\x44\xa4\x2c\xa9\x17\x5a\x57\xf6\x98\x8d\xad\x90\x72\x31\xa9\x64\x24\x5c\xe1\xb4\x53\xef\x25\xf5\x8e\xa5\x76\xe1\x0a\x09\x3f\x63\x3a\x49\xca\x53\xdf\x2d\x17\x17\xc3\x16\xcf\xa3\xa6\xa2\xf2\x71\x0d\x6a\x84\x11\x80\x63\xc8\x05\xef\x1a\x63\x77\xe7\x69\x78\x83\x34\xbb\xfc\x98\xd4\xe7\x5f\x8d\x5a\xfd\x73\xa8\xb0\x86\xaf\xf7\x7d\x49\x2e\xd8\x99\xcc\x3a\x57\x3b\x56\x48\x6b\xe4\x29\xe0\x93\x69\x3a\xd9\x22\xe9\xcb\x17\xea\x2f\xe3\x1b\xba\xce\xf8\x1d\x00\x00\xff\xff\xfe\x88\x09\x15\x9f\x01\x00\x00"

func envTemplatesCmdMainGoTplBytes() ([]byte, error) {
	return bindataRead(
		_envTemplatesCmdMainGoTpl,
		"env/templates/cmd/main.go.tpl",
	)
}

func envTemplatesCmdMainGoTpl() (*asset, error) {
	bytes, err := envTemplatesCmdMainGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "env/templates/cmd/main.go.tpl", size: 415, mode: os.FileMode(420), modTime: time.Unix(1592906159, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _envTemplatesCmdServeGoTpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\xbd\x6a\x2b\x31\x10\x85\xeb\x9d\xa7\x10\xaa\xa4\x8b\xaf\xb6\xbf\x70\x8b\x60\xb0\x49\x93\xc2\x2e\x52\x06\x79\x76\x56\x9e\x58\xd2\x2c\x63\xad\x49\x30\x7e\xf7\xe0\x9f\x14\x21\xdd\x30\xe7\x7c\x1f\x67\x8a\x78\x88\x89\x0c\x96\x01\x80\xcb\x24\xda\x8c\x83\xce\x26\x6e\xfb\x79\x17\x50\x4a\x9f\x63\x45\xd2\xbf\x07\x6e\x7d\xd4\x22\xfa\xd9\x67\x49\xf6\x67\x67\xd6\x31\x9e\xa8\xc7\xcc\x16\xa0\xb3\xe7\x73\x98\x54\xde\x09\xdb\x5b\x8d\x85\x2e\x97\x1e\xa5\x8e\x7c\xa3\x7e\x67\x43\xa4\x22\xf5\x68\xc1\x03\x8c\x73\x45\x73\x24\x3d\xd1\x13\x36\x96\xea\xd0\xfc\xc1\xcc\x61\x29\xb5\xd1\x47\xf3\x86\x54\x45\xcd\x19\x3a\x1c\x93\xf9\xf7\xdf\xdc\xc5\x61\x43\x71\x58\xde\x4e\x87\x61\x9d\x65\x17\xf3\xb6\x29\xd7\xe4\x56\x39\xa6\x7b\xe2\x3d\x74\x59\x52\x22\xbd\x82\x59\x52\x58\x53\x73\x3e\xbc\x72\xdb\xaf\x98\xf2\xe0\x6c\x9c\x26\xbb\xf8\x76\x6e\x49\x4f\x8c\xf4\x12\x0b\x79\x80\x0e\xf7\x4c\xe3\x95\x7c\xec\x0d\xcf\x95\xdb\xf2\xfa\x74\x77\xeb\xc2\xe0\x98\xfc\xa3\x18\x36\x73\x75\x1e\x3a\xa5\x36\x6b\x35\x95\x33\x5c\xe0\x2b\x00\x00\xff\xff\xcb\x01\x21\x15\x6e\x01\x00\x00"

func envTemplatesCmdServeGoTplBytes() ([]byte, error) {
	return bindataRead(
		_envTemplatesCmdServeGoTpl,
		"env/templates/cmd/serve.go.tpl",
	)
}

func envTemplatesCmdServeGoTpl() (*asset, error) {
	bytes, err := envTemplatesCmdServeGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "env/templates/cmd/serve.go.tpl", size: 366, mode: os.FileMode(420), modTime: time.Unix(1592906159, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _envTemplatesConfigConfigGoTpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\xcd\x6e\xe3\x36\x10\x3e\x8b\x4f\x31\xd5\xa1\x90\x0a\x87\x02\x7a\x34\xe0\xc3\x62\xbb\x29\xb6\x30\x52\x60\xdd\xb4\xc7\x98\x91\x46\x32\x1b\x8a\x54\x29\x32\x41\x12\xf8\xdd\x8b\xe1\x8f\xec\x04\x31\x0a\xb4\xa8\x0e\x82\x38\xbf\xdf\xcc\x37\x1c\x4d\xa2\x7d\x10\x03\x42\x6b\x74\x2f\x07\xc6\xe4\x38\x19\xeb\xa0\x62\x45\x29\x4d\x23\x8d\x77\x52\x95\x8c\x15\x8f\x42\xc9\x4e\x38\x69\x34\x94\x83\x74\x07\x7f\xcf\x5b\x33\x36\x83\xb9\x32\x2f\x2f\xa6\xa1\xd7\xd5\xc9\xa6\x64\xc5\xb9\x95\x12\xba\x45\x7b\xf5\x20\x5d\x23\xec\x68\xec\x73\xa3\xcc\x70\xd9\x46\x9b\x7b\x85\xef\xd4\xb3\xb4\x7e\x9a\x51\x93\xa7\xf5\x73\xd0\x9a\xe9\x61\xe0\x52\x37\xcf\x62\x54\xfc\xf1\xc7\x92\xd5\x8c\xb5\x46\xcf\x01\xfe\x0e\xed\xa3\x6c\xf1\x46\x8c\x08\x1b\x78\x7d\xe5\x73\x14\xdc\x69\x31\xe2\xf1\x48\xb6\x4d\x03\x9f\xfb\x01\x46\x21\x35\xcc\xce\xfa\xd6\x79\x8b\x60\x7a\x70\x07\x04\x31\x4d\xa9\x29\xde\x86\x9a\x38\x73\xcf\x13\x06\x8f\x68\x0c\xaf\xac\xd8\x9a\x01\xc2\xb3\x35\xc3\xe7\x60\x4d\x87\x3d\x21\x5a\x97\x54\xe4\x9e\x1d\x19\xeb\xbd\x6e\xa1\x6a\xfb\x81\xbc\x6b\xf8\x3d\xf6\x09\xab\x1a\xd0\x5a\x63\x29\x90\x45\xe7\xad\x86\x53\x0b\x79\xb6\xda\x85\x64\xd5\xf7\x6d\x3f\xac\x58\x71\x46\x04\xbf\x96\xa8\xba\xa0\xe0\x5b\x33\xac\xce\x9d\xbf\xe1\x5f\x5e\x5a\xec\xea\x15\x2b\xea\x05\xc2\x37\x14\x5d\x44\x59\x4d\xc2\x1d\xa8\x0e\xa9\x87\x3a\xd4\x44\x18\xc4\x53\xd4\xae\x08\x17\xac\x37\x10\xf9\xe7\xe4\x77\x2d\x15\x06\xaf\x9a\x15\xb2\x0f\x06\xdf\x6d\x40\x4b\x45\x9e\x45\x64\x85\xdf\xe0\x53\x55\xf3\x3f\xa4\x3b\x7c\xa1\xc2\x2a\xb4\xb6\xe6\xac\x28\x0a\x12\x45\xb8\x25\xc5\x28\x57\x10\x42\x05\xdd\xb5\x70\x42\x55\xa5\xd7\xe2\x5e\x21\x38\x03\x16\x45\x97\x7a\x0f\xbd\x54\x58\xd6\xac\x38\x32\x56\x24\xd1\x7a\x03\x1a\x9f\x2a\x6a\x25\x2b\x08\xc7\x06\xc2\x04\xdc\xea\x51\xd8\xf9\x20\x54\x75\x56\x48\xf4\xf9\xaf\x98\xad\x78\xba\x8b\x91\xca\x15\x2c\xd1\x2f\xc0\xf7\x19\xc7\x47\x35\x44\xbc\x51\xc1\x4f\x83\xf0\x6f\xf0\xa5\xc4\x5f\x75\xe0\xfd\xed\xb0\xe6\x74\x77\x91\xca\x0d\x28\x33\xf0\xaf\x5a\xba\x8a\x3e\x22\x7c\xca\xf1\x69\x9a\xe8\x86\xac\x21\x43\xda\x9a\x81\x27\x21\x4d\xdb\x16\x1f\x51\xad\x69\xa6\xcf\xf4\x41\xc8\x7f\x46\x57\xd1\x78\x15\x3b\xd4\xce\x3e\xaf\xdf\xda\x44\x21\xa9\x3f\x75\xdd\x6f\x56\xb4\xb8\x7e\x93\x22\x09\xc9\xe0\x97\xdd\xaf\x37\x21\xc5\xb9\x01\x09\x57\xac\x38\xfe\x73\x67\x32\x55\x1f\x77\xe7\x76\xa1\x45\x6a\xe9\xa8\x0d\xb9\x35\xe9\xc6\xfd\x90\x36\xdf\x31\xee\x83\xc8\x98\x9c\x41\x80\x99\xa8\x93\x33\xf4\xc6\x86\x8d\x40\x01\xa4\x50\xf2\x25\x74\x98\xac\xd3\xaa\xe8\xb0\x17\x5e\x85\xe0\x04\xeb\x0b\x55\x9e\xb6\xc5\x69\x2d\x9c\x76\x46\xd3\x40\xea\x30\xc8\x0e\xb5\x93\xbd\x44\x7b\xb6\x76\x38\xcb\xb4\xa4\x0b\x0a\xfb\x3f\x67\xa3\xd7\xa5\x98\xa6\xb0\xbd\x4a\x88\xfb\x65\x39\xef\x43\xd0\x40\x4b\x84\x9e\xfc\x2c\x4e\x16\x67\xd4\x2e\x2e\xee\x94\x62\xaf\x8c\x1d\xfc\x1c\x69\xdc\x73\x16\x49\x86\xb0\x75\xf9\x0e\x5b\x8b\x2e\x67\x54\xa4\xc9\xe9\xe2\x21\xe6\x8a\xf4\xc6\x64\x3f\xed\x6e\x72\x42\x6a\xd5\x1c\x55\x07\x63\x1e\x38\x4b\xc3\xf1\xae\x90\x68\x92\xe3\xa6\x53\x0c\x9c\x07\x03\x30\x12\x27\xba\x8e\x1c\x13\x74\xba\x49\x54\x31\xf4\x74\x2f\x41\x6a\x67\xc2\x64\xb3\x65\xca\xe0\xde\x18\xb5\x34\xac\xeb\xee\x1c\x49\x97\x8e\x2d\x82\x98\x8d\xa6\x2c\x67\x22\x17\x2a\x60\x14\xce\x61\x07\xc6\xbb\xc9\x3b\xce\xc2\x78\xbe\x89\x4a\xef\x1c\x30\x7c\xbf\xdb\xf1\x0b\xe7\xff\xcb\xa6\xcf\x97\xf3\xd2\xb6\xbf\xf4\x83\x20\xf2\x3e\x74\x5a\x25\xe6\xf3\x39\x4e\x40\xfe\x71\xfc\x1d\x00\x00\xff\xff\x00\x76\x80\x05\x20\x08\x00\x00"

func envTemplatesConfigConfigGoTplBytes() ([]byte, error) {
	return bindataRead(
		_envTemplatesConfigConfigGoTpl,
		"env/templates/config/config.go.tpl",
	)
}

func envTemplatesConfigConfigGoTpl() (*asset, error) {
	bytes, err := envTemplatesConfigConfigGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "env/templates/config/config.go.tpl", size: 2080, mode: os.FileMode(493), modTime: time.Unix(1592906159, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _envTemplatesMainGoTpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xcf\x4e\xf3\x30\x10\xc4\xcf\xf1\x53\xec\xe7\x93\xad\xea\x73\xee\x45\x39\x04\x04\xdc\x7a\x00\x01\x47\x64\x9c\x4d\xba\xd4\x7f\xa2\x4d\x52\x84\xaa\xbc\x3b\x72\xa2\xa2\x22\xf5\xe6\x9d\xdf\xce\x78\xa7\xb7\xee\x60\x3b\x84\x60\x29\x0a\x41\xa1\x4f\x3c\x82\x12\x85\x4c\x83\x14\xa2\x90\x1d\x8d\xfb\xe9\xc3\xb8\x14\x4a\x6f\xa3\x43\xfe\x7f\xa0\xb1\xb4\x1c\x12\x7f\x97\x3e\x75\xf2\xef\xce\xc4\xad\x3d\x62\xe9\x3c\x2d\xee\xd3\xc9\xf4\x9c\x3e\xd1\x8d\xef\xd1\x06\x9c\xe7\xd2\x85\x46\x5e\x07\x29\xb6\xd4\x5d\x67\x14\xdb\x24\x85\x16\xa2\x9d\xa2\x5b\x4e\x55\x1a\x4e\xa2\xb0\x7d\x0f\xdb\x0a\x9c\x27\xb3\xc3\xaf\xba\xef\x95\x5e\x44\xf3\x32\xe4\x4e\x15\xc8\x1a\x24\x6c\x60\xcd\x36\xcf\xc8\x47\x72\xb8\xb3\x01\x61\x03\x12\x86\x75\x96\xab\xe7\x15\x79\xa0\x14\xa1\x82\xfc\x9d\xa9\x2f\xa4\x0d\xc8\x6d\xce\xf9\x05\xb7\x13\xf9\x66\xb5\x3d\x78\xdb\x0d\x50\x81\x0b\x8d\x79\xc4\x71\x19\xcf\x67\xdc\xa5\x10\x6c\x6c\x2e\xf0\x59\x51\x5a\x88\x82\x5a\x40\xe6\xdc\x20\x2f\x3f\x4d\x51\xa5\xc1\xd4\xdc\x0d\xfa\x66\x01\xff\x2a\x88\xe4\x73\xd1\xc2\xa7\x2e\xdb\x95\x36\x6f\x34\xee\xef\x99\x13\x2b\x64\xd6\x66\x79\xfa\xa8\x64\x6b\xc9\x63\x03\x3c\xc5\x9c\x26\xb5\x28\x66\x31\x8b\x9f\x00\x00\x00\xff\xff\x9b\x51\x93\x16\xdf\x01\x00\x00"

func envTemplatesMainGoTplBytes() ([]byte, error) {
	return bindataRead(
		_envTemplatesMainGoTpl,
		"env/templates/main.go.tpl",
	)
}

func envTemplatesMainGoTpl() (*asset, error) {
	bytes, err := envTemplatesMainGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "env/templates/main.go.tpl", size: 479, mode: os.FileMode(420), modTime: time.Unix(1592906159, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"env/templates/cmd/main.go.tpl":      envTemplatesCmdMainGoTpl,
	"env/templates/cmd/serve.go.tpl":     envTemplatesCmdServeGoTpl,
	"env/templates/config/config.go.tpl": envTemplatesConfigConfigGoTpl,
	"env/templates/main.go.tpl":          envTemplatesMainGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"env": &bintree{nil, map[string]*bintree{
		"templates": &bintree{nil, map[string]*bintree{
			"cmd": &bintree{nil, map[string]*bintree{
				"main.go.tpl":  &bintree{envTemplatesCmdMainGoTpl, map[string]*bintree{}},
				"serve.go.tpl": &bintree{envTemplatesCmdServeGoTpl, map[string]*bintree{}},
			}},
			"config": &bintree{nil, map[string]*bintree{
				"config.go.tpl": &bintree{envTemplatesConfigConfigGoTpl, map[string]*bintree{}},
			}},
			"main.go.tpl": &bintree{envTemplatesMainGoTpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
